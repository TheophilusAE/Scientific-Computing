# -*- coding: utf-8 -*-
"""2702259986 - Theophilus Alexander-Gauss-Seidel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19UMwHVH6Bu1AD67KjlrQChU3rXBCIvUL
"""

import numpy as np

"""Step #1"""

a = [[9, 10, -7], [-2, 8, 5], [3, 5, 10]]

#Find diagonal coefficients
diag = np.diag (np.abs(a))

#Find  row sum without diagonal
off_diag = np.sum(np.abs (a), axis = 1 ) - diag

if np.all (diag > off_diag) :
  print ('matrix is diagonally dominant')
else :
  print ('NOT diagonally dominant')

"""Step #2"""

x1 = 0
x2 = 0
x3 = 0
epsilon = 0.01
converged = False

x_old = np.array([x1, x2, x3])

print ('iteration results')
print (' k,   x1,   x2,   x3')
for k in range (1, 50) :
  x1 = (14-10*x2+7*x3)/9
  x2 = (5+2*x1-5*x3)/8
  x3 = (-8-3*x1-5*x2)/10
  x = np.array([x1, x2, x3])

  #check if it is smaller than threshold
  dx = np.sqrt (np.dot (x-x_old, x-x_old))

  print ("%d, %.4f, %.4f, %.4f"%(k, x1, x2, x3))
  if dx < epsilon :
    converged = True
    print ('Converged!')
    break
  #Assign the latest x value to the old value
  x_old = x

if not converged :
  print ('Not converge, increase the # of iterations')